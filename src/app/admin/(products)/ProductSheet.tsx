"use client";

import { useState, useEffect } from "react";
import {
  Plus,
  Trash2,
  X,
  Image as ImageIcon,
  Loader2,
  Video,
} from "lucide-react";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";

import { BaseCategories, BaseCategoriesIds } from "@/data/categories";
import { BaseCustomizationsObj } from "@/data/customizations";
import { DBProduct } from "@/types/product";
import {
  uploadImageToS3,
  generateImageKey,
  uploadVideoToS3,
  generateVideoKey,
} from "@/lib/aws-s3";
import Image from "next/image";
import { addProduct, updateProduct } from "@/lib/products";
import { getNewProductDocId } from "@/lib/firebase";
import { compressImage } from "@/lib/images";
import { validateVideoFile } from "@/lib/videos";
import { DBCustomization } from "@/types/customization";
import { getTimestamp } from "@/utils/misc";
import { getCurrencySymbol } from "@/utils/price";

// Helper function to clean object of undefined/empty values
const cleanObject = (obj: unknown): unknown => {
  if (Array.isArray(obj)) {
    return obj
      .map(cleanObject)
      .filter(
        (item) =>
          item !== null && item !== undefined && item !== "" && item !== 0
      );
  }

  if (obj !== null && typeof obj === "object") {
    const cleaned: Record<string, unknown> = {};
    Object.entries(obj).forEach(([key, value]) => {
      const cleanedValue = cleanObject(value);
      if (
        cleanedValue !== null &&
        cleanedValue !== undefined &&
        cleanedValue !== "" &&
        cleanedValue !== 0
      ) {
        if (Array.isArray(cleanedValue)) {
          cleaned[key] = cleanedValue;
        } else if (typeof cleanedValue === "object") {
          cleaned[key] = cleanedValue;
        } else {
          cleaned[key] = cleanedValue;
        }
      }
    });
    return Object.keys(cleaned).length > 0 ? cleaned : null;
  }

  return obj;
};

// Type for media state to handle files and preview URLs
interface MediaState {
  file: File | null;
  preview: string;
  existingUrl?: string; // For existing media that are already uploaded
  type: "image" | "video";
}

const defaultProductData: DBProduct = {
  id: "", // This will be generated by the server
  name: "",
  description: "",
  dimensions: "",
  weight: 0,
  images: [],
  videos: [],
  slug: "",
  price: 0,
  categoryId: "keychains" as BaseCategoriesIds,
  customizationOptions: [] as DBCustomization[],
  available: true,
  isBestSeller: false,
  isDiscoverable: true,
  createdAt: getTimestamp(),
};

interface ProductSheetProps {
  trigger?: React.ReactNode;
  onProductSaved?: () => void;
  product?: DBProduct | null;
  isOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
}

export function ProductSheet({
  trigger,
  onProductSaved,
  product,
  isOpen: controlledOpen,
  onOpenChange: controlledOnOpenChange,
}: ProductSheetProps) {
  const [internalOpen, setInternalOpen] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [productData, setProductData] = useState(defaultProductData);

  const isOpen = controlledOpen !== undefined ? controlledOpen : internalOpen;
  const onOpenChange =
    controlledOnOpenChange !== undefined
      ? controlledOnOpenChange
      : setInternalOpen;

  const isEditMode = !!product;

  // State for handling file uploads and previews
  const [mediaStates, setMediaStates] = useState<MediaState[]>([
    { file: null, preview: "", type: "image" },
  ]);

  // Initialize form data when product changes or sheet opens
  useEffect(() => {
    if (isOpen) {
      if (product) {
        // Edit mode - load existing product data
        setProductData(product);

        // Initialize media states with existing images and videos
        const existingMediaStates: MediaState[] = [
          ...product.images.map((url) => ({
            file: null,
            preview: url,
            existingUrl: url,
            type: "image" as const,
          })),
          ...product.videos.map((url) => ({
            file: null,
            preview: url,
            existingUrl: url,
            type: "video" as const,
          })),
        ];

        // Ensure at least one empty state for adding new media
        if (existingMediaStates.length === 0) {
          existingMediaStates.push({ file: null, preview: "", type: "image" });
        }

        setMediaStates(existingMediaStates);
      } else {
        // Add mode - reset to defaults
        setProductData(defaultProductData);
        setMediaStates([{ file: null, preview: "", type: "image" }]);
      }
    }
  }, [isOpen, product]);

  // Reset form when sheet closes
  useEffect(() => {
    if (!isOpen) {
      setProductData(defaultProductData);
      setMediaStates([{ file: null, preview: "", type: "image" }]);
    }
  }, [isOpen]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsUploading(true);

    try {
      let finalImageUrls: string[] = [];
      let finalVideoUrls: string[] = [];
      let productId = productData.id;

      if (isEditMode) {
        // For edit mode, start with existing media that haven't changed
        finalImageUrls = mediaStates
          .filter(
            (state) =>
              state.existingUrl && !state.file && state.type === "image"
          )
          .map((state) => state.existingUrl!);

        finalVideoUrls = mediaStates
          .filter(
            (state) =>
              state.existingUrl && !state.file && state.type === "video"
          )
          .map((state) => state.existingUrl!);

        // Upload new media
        for (const mediaState of mediaStates) {
          if (mediaState.file) {
            if (mediaState.type === "image") {
              const imageKey = generateImageKey(
                mediaState.file.name,
                productId
              );
              const compressedImage = await compressImage(mediaState.file);
              const uploadedUrl = await uploadImageToS3(
                compressedImage,
                imageKey
              );
              finalImageUrls.push(uploadedUrl);
            } else if (mediaState.type === "video") {
              const videoKey = generateVideoKey(
                mediaState.file.name,
                productId
              );
              const uploadedUrl = await uploadVideoToS3(
                mediaState.file,
                videoKey
              );
              finalVideoUrls.push(uploadedUrl);
            }
          }
        }
      } else {
        // For add mode, generate new product ID
        productId = await getNewProductDocId();
        console.log("New Product ID:", productId);

        // Handle media uploads
        for (const mediaState of mediaStates) {
          if (mediaState.file) {
            if (mediaState.type === "image") {
              const imageKey = generateImageKey(
                mediaState.file.name,
                productId
              );
              const compressedImage = await compressImage(mediaState.file);
              const uploadedUrl = await uploadImageToS3(
                compressedImage,
                imageKey
              );
              finalImageUrls.push(uploadedUrl);
            } else if (mediaState.type === "video") {
              const videoKey = generateVideoKey(
                mediaState.file.name,
                productId
              );
              const uploadedUrl = await uploadVideoToS3(
                mediaState.file,
                videoKey
              );
              finalVideoUrls.push(uploadedUrl);
            }
          }
        }
      }

      // Create/update slug
      const stopWords = [
        "and",
        "for",
        "the",
        "a",
        "an",
        "or",
        "but",
        "in",
        "on",
        "at",
        "to",
        "with",
        "by",
        "of",
        "is",
        "are",
        "was",
        "were",
        "be",
        "been",
        "have",
        "has",
        "had",
        "do",
        "does",
        "did",
        "will",
        "would",
        "could",
        "should",
        "may",
        "might",
        "can",
        "this",
        "that",
        "these",
        "those",
      ];

      const slug =
        isEditMode && productData.slug
          ? productData.slug // Keep existing slug in edit mode
          : productData.name
              .toLowerCase()
              .trim()
              .split(/\s+/)
              .filter((word) => word.length > 0 && !stopWords.includes(word))
              .join("-") +
            "-" +
            productId;

      // Update product data with final media URLs
      const finalProductData: DBProduct = {
        ...productData,
        id: productId,
        slug,
        images: finalImageUrls,
        videos: finalVideoUrls,
        createdAt: productData.createdAt || getTimestamp(),
      };

      const cleanedData: DBProduct = cleanObject(finalProductData) as DBProduct;
      console.log("Clean Product data:", cleanedData);

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { id: _, ...cleanedDataWithoutId } = cleanedData;

      if (isEditMode) {
        // Update existing product
        await updateProduct(productId, cleanedDataWithoutId);
        console.log("Updated product:", cleanedDataWithoutId);
      } else {
        // Add new product
        await addProduct(productId, cleanedDataWithoutId);
        console.log("Added product:", cleanedDataWithoutId);
      }

      // Trigger callback
      onProductSaved?.();

      // Reset form and close
      setProductData(defaultProductData);
      setMediaStates([{ file: null, preview: "", type: "image" }]);
      onOpenChange(false);
    } catch (error) {
      console.error("Error saving product:", error);
      alert("Error saving product. Please try again.");
    } finally {
      setIsUploading(false);
    }
  };

  const addCustomization = () => {
    setProductData((prev) => ({
      ...prev,
      customizationOptions: [
        ...prev.customizationOptions,
        {
          customizationRefId: "",
        },
      ],
    }));
  };

  const addMedia = (type: "image" | "video" = "image") => {
    setMediaStates((prev) => [...prev, { file: null, preview: "", type }]);
  };

  const removeMedia = (index: number) => {
    if (mediaStates.length > 1) {
      setMediaStates((prev) => prev.filter((_, i) => i !== index));
    }
  };

  const removeCustomization = (index: number) => {
    setProductData((prev) => ({
      ...prev,
      customizationOptions: prev.customizationOptions.filter(
        (_, i) => i !== index
      ),
    }));
  };

  const handleMediaChange = (
    index: number,
    file: File | null,
    type?: "image" | "video"
  ) => {
    if (file) {
      const mediaType =
        type || (file.type.startsWith("video/") ? "video" : "image");

      // Validate file type
      if (mediaType === "video" && !validateVideoFile(file)) {
        alert(
          "Please select a valid video file (MP4, WebM, OGG, AVI, MOV, WMV)"
        );
        return;
      }

      // Check file size (50MB limit for videos, 10MB for images)
      const maxSize =
        mediaType === "video" ? 50 * 1024 * 1024 : 10 * 1024 * 1024;
      if (file.size > maxSize) {
        alert(
          `File size too large. Maximum size: ${
            mediaType === "video" ? "50MB" : "10MB"
          }`
        );
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setMediaStates((prev) =>
          prev.map((state, i) =>
            i === index
              ? {
                  file,
                  preview: e.target?.result as string,
                  existingUrl: undefined, // Clear existing URL when new file is selected
                  type: mediaType,
                }
              : state
          )
        );
      };
      reader.readAsDataURL(file);
    } else {
      setMediaStates((prev) =>
        prev.map((state, i) =>
          i === index
            ? {
                file: null,
                preview: "",
                existingUrl: undefined,
                type: state.type,
              }
            : state
        )
      );
    }
  };

  const loadBaseCustomization = (customizationRefId: string, index: number) => {
    if (customizationRefId && BaseCustomizationsObj[customizationRefId]) {
      setProductData((prev) => ({
        ...prev,
        customizationOptions: prev.customizationOptions.map((option, i) =>
          i === index ? { customizationRefId } : option
        ),
      }));
    }
  };

  const sheetContent = (
    <SheetContent className="w-[700px] sm:max-w-none overflow-y-auto p-8">
      <SheetHeader className="pb-6">
        <SheetTitle className="text-2xl">
          {isEditMode ? "Edit Product" : "Add New Product"}
        </SheetTitle>
        <SheetDescription className="text-base">
          {isEditMode
            ? `Update product details for ${productData.name}`
            : "Create a new product with customization options"}
        </SheetDescription>
      </SheetHeader>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Basic Product Info */}
        <div className="space-y-6 p-6 border rounded-lg">
          <h3 className="text-lg font-semibold">Basic Information</h3>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Category
            </label>
            <Select
              value={productData.categoryId}
              onValueChange={(value) =>
                setProductData((prev) => ({
                  ...prev,
                  categoryId: value as BaseCategoriesIds,
                }))
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a category" />
              </SelectTrigger>
              <SelectContent>
                {BaseCategories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Product Name
            </label>
            <Input
              placeholder="Enter product name"
              value={productData.name}
              onChange={(e) =>
                setProductData((prev) => ({ ...prev, name: e.target.value }))
              }
              required
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Description
            </label>
            <Textarea
              placeholder="Enter product description"
              className="min-h-24"
              value={productData.description || ""}
              onChange={(e) =>
                setProductData((prev) => ({
                  ...prev,
                  description: e.target.value,
                }))
              }
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Dimensions
            </label>
            <Input
              placeholder="e.g., 5cm x 3cm x 1cm"
              value={productData.dimensions}
              onChange={(e) =>
                setProductData((prev) => ({
                  ...prev,
                  dimensions: e.target.value,
                }))
              }
              required
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Weight
            </label>
            <Input
              placeholder="e.g., 5"
              value={productData.weight?.toString() || ""}
              onChange={(e) =>
                setProductData((prev) => ({
                  ...prev,
                  weight: parseFloat(e.target.value) || 0,
                }))
              }
              required
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Price ({getCurrencySymbol()})
            </label>
            <Input
              type="number"
              placeholder="0.00"
              value={productData.price || 0}
              onChange={(e) =>
                setProductData((prev) => ({
                  ...prev,
                  price: parseFloat(e.target.value) || 0,
                }))
              }
              required
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                Available
              </label>
              <Select
                value={productData.available.toString()}
                onValueChange={(value) =>
                  setProductData((prev) => ({
                    ...prev,
                    available: value === "true",
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="true">Yes</SelectItem>
                  <SelectItem value="false">No</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                Best Seller
              </label>
              <Select
                value={productData.isBestSeller.toString()}
                onValueChange={(value) =>
                  setProductData((prev) => ({
                    ...prev,
                    isBestSeller: value === "true",
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="true">Yes</SelectItem>
                  <SelectItem value="false">No</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
              Discoverable
            </label>
            <Select
              value={productData.isDiscoverable?.toString()}
              onValueChange={(value) =>
                setProductData((prev) => ({
                  ...prev,
                  isDiscoverable: value === "true",
                }))
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="true">Yes</SelectItem>
                <SelectItem value="false">No</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Product Media */}
        <div className="space-y-6 p-6 border rounded-lg">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Product Media</h3>
            <div className="flex gap-2">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => addMedia("image")}
              >
                <ImageIcon className="w-4 h-4 mr-2" />
                Add Image
              </Button>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => addMedia("video")}
              >
                <Video className="w-4 h-4 mr-2" />
                Add Video
              </Button>
            </div>
          </div>

          <div className="space-y-4">
            {mediaStates.map((mediaState, index) => (
              <div key={index} className="border rounded-lg p-4">
                <div className="flex gap-4">
                  {/* Media Preview */}
                  <div className="flex-shrink-0">
                    {mediaState.preview ? (
                      <div className="relative">
                        {mediaState.type === "image" ? (
                          <Image
                            src={mediaState.preview}
                            alt={`Preview ${index + 1}`}
                            width={80}
                            height={80}
                            className="w-20 h-20 object-cover rounded-md border"
                          />
                        ) : (
                          <video
                            src={mediaState.preview}
                            width={80}
                            height={80}
                            className="w-20 h-20 object-cover rounded-md border"
                            controls={false}
                            muted
                          />
                        )}
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          className="absolute -top-2 -right-2 h-6 w-6"
                          onClick={() => handleMediaChange(index, null)}
                        >
                          <X className="w-3 h-3" />
                        </Button>
                      </div>
                    ) : (
                      <div className="w-20 h-20 border-2 border-dashed border-border rounded-md flex items-center justify-center">
                        {mediaState.type === "image" ? (
                          <ImageIcon className="w-8 h-8 text-muted-foreground" />
                        ) : (
                          <Video className="w-8 h-8 text-muted-foreground" />
                        )}
                      </div>
                    )}
                  </div>

                  {/* File Input */}
                  <div className="flex-1 space-y-2">
                    <label className="text-sm font-medium">
                      {mediaState.type === "image" ? "Image" : "Video"}{" "}
                      {index + 1}
                      {mediaState.existingUrl && !mediaState.file && (
                        <span className="text-xs text-muted-foreground ml-2">
                          (Current {mediaState.type})
                        </span>
                      )}
                    </label>
                    <div className="flex gap-2">
                      <Input
                        type="file"
                        accept={
                          mediaState.type === "image" ? "image/*" : "video/*"
                        }
                        onChange={(e) => {
                          const file = e.target.files?.[0] || null;
                          handleMediaChange(index, file);
                        }}
                        className="flex-1"
                      />
                      {mediaStates.length > 1 && (
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          onClick={() => removeMedia(index)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                    {mediaState.file && (
                      <p className="text-xs text-muted-foreground">
                        {mediaState.file.name} (
                        {Math.round(mediaState.file.size / 1024)} KB)
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Customization Options */}
        <div className="space-y-6 p-6 border rounded-lg">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">Customization Options</h3>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={addCustomization}
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Customization
            </Button>
          </div>

          <div className="space-y-6">
            {productData.customizationOptions.length > 0 &&
              productData.customizationOptions.map((option, index) => (
                <div
                  key={index}
                  className="border rounded-lg p-6 space-y-6 bg-muted/20"
                >
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium text-lg">
                      Customization Option {index + 1}
                      {option.customizationRefId &&
                        BaseCustomizationsObj[option.customizationRefId] && (
                          <span className="text-sm font-normal text-muted-foreground ml-2">
                            (Based on:{" "}
                            {
                              BaseCustomizationsObj[option.customizationRefId]
                                .label
                            }
                            )
                          </span>
                        )}
                    </h4>
                    <Button
                      type="button"
                      variant="outline"
                      size="icon"
                      onClick={() => removeCustomization(index)}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>

                  {/* Base Customization Selector */}
                  <div className="p-4 bg-background rounded-md border">
                    <div className="flex items-center justify-between mb-3">
                      <label className="text-sm font-medium">
                        Load from Base Customizations
                      </label>
                    </div>
                    <Select
                      value={option.customizationRefId || ""}
                      onValueChange={(value) =>
                        loadBaseCustomization(value, index)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select a base customization to load" />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(BaseCustomizationsObj)
                          .filter(
                            ([, customization]) =>
                              customization.categoryId ===
                              productData.categoryId
                          )
                          .map(([id, customization]) => (
                            <SelectItem key={id} value={id}>
                              {customization.label} ({customization.type})
                            </SelectItem>
                          ))}
                      </SelectContent>
                    </Select>
                    {option.customizationRefId &&
                      BaseCustomizationsObj[option.customizationRefId] && (
                        <div className="mt-2 text-xs text-muted-foreground">
                          Base values:{" "}
                          {
                            BaseCustomizationsObj[option.customizationRefId]
                              .label
                          }{" "}
                          •
                          {
                            BaseCustomizationsObj[option.customizationRefId]
                              .type
                          }{" "}
                          • {getCurrencySymbol()}
                          {
                            BaseCustomizationsObj[option.customizationRefId]
                              .priceAdd
                          }{" "}
                          •
                          {BaseCustomizationsObj[option.customizationRefId]
                            .required
                            ? "Required"
                            : "Optional"}
                        </div>
                      )}
                  </div>
                </div>
              ))}
          </div>
        </div>

        <div className="flex justify-end space-x-4 pt-6">
          <Button
            type="button"
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isUploading}
          >
            Cancel
          </Button>
          <Button type="submit" disabled={isUploading}>
            {isUploading ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                {isEditMode ? "Updating..." : "Adding..."}
              </>
            ) : (
              <>
                <Plus className="w-4 h-4 mr-2" />
                {isEditMode ? "Update Product" : "Add Product"}
              </>
            )}
          </Button>
        </div>
      </form>
    </SheetContent>
  );

  return (
    <Sheet open={isOpen} onOpenChange={onOpenChange}>
      {trigger && <SheetTrigger asChild>{trigger}</SheetTrigger>}
      {sheetContent}
    </Sheet>
  );
}

// Convenience component for adding products
export function AddProductSheet({
  onProductSaved,
}: {
  onProductSaved?: () => void;
}) {
  return (
    <ProductSheet
      trigger={
        <Button>
          <Plus className="w-4 h-4 mr-1" />
          Add Product
        </Button>
      }
      onProductSaved={onProductSaved}
    />
  );
}
